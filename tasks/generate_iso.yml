---  
- name: Create the extraction directory
  file:
    path: "{{ target_dir }}/iso"
    state: directory

- name: Extract the ISO
  shell:
    cmd: "xorriso -osirrox on -indev {{ target_dir }}/debian-server-{{ iso_arch }}.iso -extract / {{ target_dir }}/iso"

- name: Fix extracted ISO mode
  file:
    path: "{{ target_dir }}/iso"
    mode: "u+w"
    recurse: yes
    follow: no

- name: Download preseed.cfg
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/mataborg/ansible-role-proxmox_autoinstall/main/preseed.cfg
    dest: "{{ target_dir }}/iso"

- name: Extract initrd.gz 
  shell:
    cmd: "gunzip {{ target_dir }}/iso/install.amd/initrd"

- name: Pass preseed.cfg to initrd.gz
  shell:
    cmd: "echo {{ target_dir }}/iso/preseed.cfg | cpio -H newc -o -A -F {{ target_dir }}/iso/install.amd/initrd"

- name: Rezip initrd
  shell:
    cmd: "gzip {{ target_dir }}/iso/install.amd/initrd"

- name: Pass autoinstall flag to installer
  shell:
    cmd: "sed -i 's/vesamenu.c32/auto/' {{ target_dir }}/iso/isolinux/isolinux.cfg"

- name: Add preseed.cfg iso filepath to adtxt.cfg
  ansible.builtin.lineinfile:
    path: "{{ target_dir }}/iso/isolinux/adtxt.cfg"
    search_string: '	append auto=true priority=critical vga=788 initrd=/install.amd/initrd.gz --- quiet '
    line: '    append auto=true priority=critical vga=788 initrd=/install.amd/initrd.gz --- quiet file=/cdrom/preseed.cfg '

- name: Add preseed.cfg iso filepath to txt.cfg
  ansible.builtin.lineinfile:
    path: "{{ target_dir }}/iso/isolinux/txt.cfg"
    search_string: '	append vga=788 initrd=/install.amd/initrd.gz --- quiet '
    line: '    append vga=788 initrd=/install.amd/initrd.gz --- quiet file=/cdrom/preseed.cfg '

# - name: Modify timeouts 1/2
#   shell:
#     cmd: "sed -i 's/timeout 0/timeout 4/' {{ target_dir }}/iso/isolinux/isolinux.cfg"

# - name: Modify timeouts 2/2
#   shell:
#     cmd: "sed -i 's/timeout 0/timeout 4/' {{ target_dir }}/iso/isolinux/prompt.cfg"

- name: Update MD5 Hash 1/3 
  shell: 
    cmd: "chmod +w {{ target_dir }}/iso/md5sum.txt"

- name: Update MD5 Hash 2/3 - write hashes
  shell: 
    cmd: "find '.' -follow -type f ! -name {{ target_dir }}/iso/md5sum.txt -print0 | xargs -0 md5sum | tee {{ target_dir }}/iso/md5sum.txt"

- name: Update MD5 Hash 3/3  
  shell: 
    cmd: "chmod -w {{ target_dir }}/iso/md5sum.txt"

# - name: Save MBR
#   shell: 
#     cmd: "dd if=\"{{ target_dir }}/debian-server-{{ iso_arch }}.iso\" bs=1 count=432 of=\"{{ target_dir }}/mbr_template\""

- name: Repack the ISO (amd64)
  shell:
    cmd: "cd {{ target_dir }} &&  xorriso -as mkisofs -o debian_pve_autoinstall_{{ iso_arch }}.iso -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin -c isolinux/boot.cat -b isolinux/isolinux.bin -no-emul-boot -boot-load-size 4 -boot-info-table iso"
  when: iso_arch == 'amd64'

# - name: Repack the ISO (arm64)
#   shell:
#     cmd: "cd {{ target_dir }}/iso && xorriso -as mkisofs -quiet -r -V debian_pve_autoinstall_{{ iso_arch }} -J -joliet-long -no-emul-boot -e boot/grub/efi.img -partition_cyl_align all -append_partition 2 0xef boot/grub/efi.img -no-emul-boot -o {{ target_dir }}/debian_pve_autoinstall_{{ iso_arch }}.iso ."
#   when: iso_arch == 'arm64'

- name: Make {{ target_dir }} writable
  shell:
    cmd: "chmod +w -R {{ target_dir }}/iso/"

# - name: Clean up
#   file:
#     path: "{{ item }}"
#     state: absent
#   with_items: 
#     - "{{ target_dir }}/debian-server-{{ iso_arch }}.iso"
#     - "{{ target_dir }}/iso"
#     # - "{{ target_dir }}/mbr_template"
#     - "{{ target_dir }}/SHA256SUMS"

- name: Done!
  debug:
    msg: "Done! The ISO file has been generated: {{target_dir}}/debian_pve_autoinstall_{{ iso_arch }}.iso"